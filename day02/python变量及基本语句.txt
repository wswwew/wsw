python变量
变量名称约定
1.第一个字符只能是大小写字母或下划线
2.后续字符只能是大小写字母或数字或下划线
3.区分大小写

python中不能直接定义变量,定义变量时必须进行赋值
赋值的语句:变量名 = 值
过程:
首次对变量赋值相当与创建变量名并且和赋值进行绑定
再次赋值相当于对赋值进行修改

python
#-*- coding:utf-8 -*- #指定编码类型

数据类型
一.数字类型
整数
十进制0~9
二进制0~1 0b或0B
八进制0~7 0o或0O
16进制0~9 a~f 0x或0X 
在python中整数理论上可以无限大
二.布尔值
True 有值/有效/条件满足,成立 1
False 没有值/无效/条件不满足,不成立 0
首字母必须大写
三.浮点数
带有小数点的数字
ps:整数与浮点数进行运算时,结果默认为浮点数
四.复数
实数与虚数复合

计算方式
**:次方
%:取余
//:向下取整(地板除)

字符串
1.python中字符串被定义为引号之间的字符集合
2.python支持使用成对的单引号或双引号,无论单引号,还是双引号,表示的意义相同
3.python还支持三引号(三个连续的单引号或者双引号),可以用来包含特殊字符
4.python不区分字符和字符串


字符串切片
切片:
从有顺序的一组数据中取出指定的内容
索引值:
表示数据的位置 从0开始
反向索引值:
用-1表示最后一位,一次递减

使用索引进行切片
使用索引运算符[ ]和切片运算符[ : ]可得到子字符串
切片不包含结束位置字符

子串拼接
运算符+只有字符串和字符串之间才能拼接

生产重复字符串
运算符* 字符串和整数运算,生成重复的字符串

列表
容器,可以存放任意类型的python对象,类似于数组
使用[ ]表示列表,列表中的值用逗号分隔
例:alist = [1, 2, 3, True, False, 'abc', 1.25, [1, 2, 3]]
列表的操作
使用in/not in判断对象是否在列表中

元组
用( )表示元组
元组的内容不可改变,其余的和列表相同
例:
>>> ait = (1, 2, 3, True, False, 'abc', 1.25, [1, 2, 3])
>>> ait[1] = 5
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment

字典
字典由键-植对构成的有关系的数据类型
用{ }用于表示字典
{键:值,键值,....}
例:
adict = {'name':'bob','age':18,'address':'bj'}
使用键进行索引
例;
>>> adict['age']
18
ps:如果键不存在,报错
如果对不存在的键赋值,相当于为字典添加新的键值对
例:
>>> adict['phone'] = 137
>>> adict
{'name': 'bob', 'age': 18, 'address': 'bj', 'phone': 137}

字典成员的判断
使用in/not in判断键是否存在
例:
>>> 'name' in adict
True

数据类型分类
可变:列表.字典
不可变类型:数字.字符串.元组

运算符
1.算术运算
+ - * / % // **
2.比较
 <, <=, >, >=, ==, !=
3.字符串之间比较大小,会按照首字符的ascii编码表的值比较
例:
>>> 'a'>'b'
False
>>> 'admin'>'b'
False
4.逻辑运算
and or not

0 and 1  0
1 and 0  0
and运算 前面结果为False返回前面的值(即全对为True,有错则为False)
0 or 1  1
1 or 0  1
or运算 前面结果为False返回后面的值(即全错为False,有对则为True)
not 0  True
not 1  False
not运算 返回相反的布尔值

python的语句
判断语句
if 表达式:
    if_suit
else:
    else_suit
数字类型只要非0就是True
空字符串,空列表,空元组,空字典为False
例:
0 0.0 0+0j False '' [] () {} 布尔值为False

完整的if语句结构
if exp:
    if_suit
elif exp2:
     elif_suit
else:
     else_suit

ps:int()函数将数据类型转换为ie整数

三元表达式
X if C else Y
例:
>>> x = 3
>>> y = 4
>>> smaller = x if x<y else y
>>> smaller
3

循环语句
while

while exp:
    while_suit
当表达式的值为True时,重复执行while_suit语句
当表达式的值为False时,循环结束
ps:变量加一的两种写法
   number = number+1
   number += 1

break语句
退出当前循环

continue语句
结束本次循环,立即开始下一轮循环

else语句
当循环完全结束后可以执行else内的代码
break语句会跳过else

死循环
条件永远满足的循环叫做死循环
死循环中的else永远不会被执行

导入随机模块
import random
num = random.randint(1,100)













